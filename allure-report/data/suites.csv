"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Tue Jul 29 17:14:35 UTC 2025","Tue Jul 29 17:14:35 UTC 2025","172","Books and Authors API Automation Suite","Authors API Tests","com.avenga.yablonskyi.tests.authors.AuthorsPositiveTest","com.avenga.yablonskyi.tests.authors.AuthorsPositiveTest","checkDeleteAuthor","Verify that author can be deleted via API","Ensure that an author can be deleted using DELETE /Authors/{id}."
"passed","Tue Jul 29 17:14:34 UTC 2025","Tue Jul 29 17:14:34 UTC 2025","189","Books and Authors API Automation Suite","Authors API Tests","com.avenga.yablonskyi.tests.authors.AuthorsPositiveTest","com.avenga.yablonskyi.tests.authors.AuthorsPositiveTest","checkCreateAuthor","Verify that new author can be created via API","Ensure that a new author can be successfully created using POST /Authors."
"failed","Tue Jul 29 17:14:33 UTC 2025","Tue Jul 29 17:14:33 UTC 2025","173","Books and Authors API Automation Suite","Books API Tests","com.avenga.yablonskyi.tests.books.BooksEdgeCasesTest","com.avenga.yablonskyi.tests.books.BooksEdgeCasesTest","checkCreateBookWithExistingId","Verify that creating a book with existing ID is not allowed ","Ensure POST /Books fails with proper error code when book ID already exists."
"failed","Tue Jul 29 17:14:33 UTC 2025","Tue Jul 29 17:14:33 UTC 2025","170","Books and Authors API Automation Suite","Books API Tests","com.avenga.yablonskyi.tests.books.BooksEdgeCasesTest","com.avenga.yablonskyi.tests.books.BooksEdgeCasesTest","checkCreateBookWithMissingFieldsReturns400","Verify that posting a book with missing required fields fails","Ensure POST /Books fails with 400 when required fields are missing."
"passed","Tue Jul 29 17:14:32 UTC 2025","Tue Jul 29 17:14:32 UTC 2025","183","Books and Authors API Automation Suite","Books API Tests","com.avenga.yablonskyi.tests.books.BooksPositiveTest","com.avenga.yablonskyi.tests.books.BooksPositiveTest","checkUpdateBook","Verify that existing book can be updated via API","Ensure that an existing book's data can be updated using PUT /Books/{id}."
"passed","Tue Jul 29 17:14:33 UTC 2025","Tue Jul 29 17:14:33 UTC 2025","397","Books and Authors API Automation Suite","Authors API Tests","com.avenga.yablonskyi.tests.authors.AuthorsPositiveTest","com.avenga.yablonskyi.tests.authors.AuthorsPositiveTest","checkGetAllAuthors","Verify that all authors informations can be retrieved via API","Ensure that the GET /Authors endpoint returns a non-empty list of authors."
"failed","Tue Jul 29 17:14:34 UTC 2025","Tue Jul 29 17:14:34 UTC 2025","172","Books and Authors API Automation Suite","Authors API Tests","com.avenga.yablonskyi.tests.authors.AuthorsEdgeCasesTest","com.avenga.yablonskyi.tests.authors.AuthorsEdgeCasesTest","checkDeleteNonExistingAuthorReturns404","Verify that deleting a non-existing author returns 404","Ensure that DELETE /Authors/{id} returns 404 when trying to delete a non-existing author."
"passed","Tue Jul 29 17:14:31 UTC 2025","Tue Jul 29 17:14:31 UTC 2025","240","Books and Authors API Automation Suite","Books API Tests","com.avenga.yablonskyi.tests.books.BooksEdgeCasesTest","com.avenga.yablonskyi.tests.books.BooksEdgeCasesTest","checkGetZeroIdBookReturns404","Verify that getting a book with zero ID returns 404","Ensure the API returns 404 when book ID = 0"
"failed","Tue Jul 29 17:14:32 UTC 2025","Tue Jul 29 17:14:33 UTC 2025","176","Books and Authors API Automation Suite","Books API Tests","com.avenga.yablonskyi.tests.books.BooksEdgeCasesTest","com.avenga.yablonskyi.tests.books.BooksEdgeCasesTest","checkUpdateNonExistingBook","Verify that updating a non-existing book returns 200 (fake behavior)","Ensure PUT /Books/{id} returns 404 when trying to update a non-existing book."
"passed","Tue Jul 29 17:14:34 UTC 2025","Tue Jul 29 17:14:34 UTC 2025","169","Books and Authors API Automation Suite","Authors API Tests","com.avenga.yablonskyi.tests.authors.AuthorsEdgeCasesTest","com.avenga.yablonskyi.tests.authors.AuthorsEdgeCasesTest","checkGetNonExistingAuthorReturns404","Verify that getting an author with non-existing ID returns 404","Ensure that GET /Authors/{id} returns 404 when the author ID does not exist."
"passed","Tue Jul 29 17:14:31 UTC 2025","Tue Jul 29 17:14:32 UTC 2025","393","Books and Authors API Automation Suite","Books API Tests","com.avenga.yablonskyi.tests.books.BooksPositiveTest","com.avenga.yablonskyi.tests.books.BooksPositiveTest","checkGetOneBook","Verify that single book's information can be retrieved via API","Ensure that the GET /Books/{id} endpoint returns the correct book by ID."
"passed","Tue Jul 29 17:14:34 UTC 2025","Tue Jul 29 17:14:34 UTC 2025","226","Books and Authors API Automation Suite","Authors API Tests","com.avenga.yablonskyi.tests.authors.AuthorsPositiveTest","com.avenga.yablonskyi.tests.authors.AuthorsPositiveTest","checkGetOneAuthor","Verify that single author's information can be retrieved via API","Ensure that the GET /Authors/{id} endpoint returns the correct author by ID."
"failed","Tue Jul 29 17:14:32 UTC 2025","Tue Jul 29 17:14:32 UTC 2025","198","Books and Authors API Automation Suite","Books API Tests","com.avenga.yablonskyi.tests.books.BooksEdgeCasesTest","com.avenga.yablonskyi.tests.books.BooksEdgeCasesTest","checkDeleteNonExistingBookReturns404","Verify that deleting a non-existing book returns 404","Ensure DELETE /Books/{id} returns 404 when book does not exist."
"failed","Tue Jul 29 17:14:35 UTC 2025","Tue Jul 29 17:14:35 UTC 2025","180","Books and Authors API Automation Suite","Authors API Tests","com.avenga.yablonskyi.tests.authors.AuthorsEdgeCasesTest","com.avenga.yablonskyi.tests.authors.AuthorsEdgeCasesTest","checkCreateAuthorWithMissingFieldsReturns400","Verify that creating an author with missing required fields fails","Ensure that POST /Authors returns 400 when required fields are missing."
"failed","Tue Jul 29 17:14:35 UTC 2025","Tue Jul 29 17:14:35 UTC 2025","174","Books and Authors API Automation Suite","Authors API Tests","com.avenga.yablonskyi.tests.authors.AuthorsEdgeCasesTest","com.avenga.yablonskyi.tests.authors.AuthorsEdgeCasesTest","checkUpdateNonExistingAuthorReturns404","Verify that updating a non-existing author returns 404","Ensure that PUT /Authors/{id} returns 404 when updating a non-existing author."
"passed","Tue Jul 29 17:14:32 UTC 2025","Tue Jul 29 17:14:32 UTC 2025","192","Books and Authors API Automation Suite","Books API Tests","com.avenga.yablonskyi.tests.books.BooksEdgeCasesTest","com.avenga.yablonskyi.tests.books.BooksEdgeCasesTest","checkGetNonExistingBookReturns404","Verify that getting a book with non-existing ID returns 404","Ensure GET /Books/{id} returns 404 for non-existing book ID."
"passed","Tue Jul 29 17:14:33 UTC 2025","Tue Jul 29 17:14:33 UTC 2025","178","Books and Authors API Automation Suite","Books API Tests","com.avenga.yablonskyi.tests.books.BooksPositiveTest","com.avenga.yablonskyi.tests.books.BooksPositiveTest","checkDeleteBook","Verify that book can be deleted via API","Ensure that a book can be deleted using DELETE /Books/{id}."
"passed","Tue Jul 29 17:14:34 UTC 2025","Tue Jul 29 17:14:35 UTC 2025","184","Books and Authors API Automation Suite","Authors API Tests","com.avenga.yablonskyi.tests.authors.AuthorsPositiveTest","com.avenga.yablonskyi.tests.authors.AuthorsPositiveTest","checkUpdateAuthor","Verify that existing author can be created via API","Ensure that an existing author's data can be updated using PUT /Authors/{id}."
"passed","Tue Jul 29 17:14:32 UTC 2025","Tue Jul 29 17:14:32 UTC 2025","233","Books and Authors API Automation Suite","Books API Tests","com.avenga.yablonskyi.tests.books.BooksPositiveTest","com.avenga.yablonskyi.tests.books.BooksPositiveTest","checkCreateBook","Verify that new book can be created via API","Ensure that a new book can be successfully created using POST /Books."
"failed","Tue Jul 29 17:14:35 UTC 2025","Tue Jul 29 17:14:35 UTC 2025","162","Books and Authors API Automation Suite","Authors API Tests","com.avenga.yablonskyi.tests.authors.AuthorsEdgeCasesTest","com.avenga.yablonskyi.tests.authors.AuthorsEdgeCasesTest","checkCreateAuthorWithExistingId","Verify that creating an author with existing ID is not allowed","Ensure that POST /Authors returns an error when trying to create an author with an existing ID."
"passed","Tue Jul 29 17:14:29 UTC 2025","Tue Jul 29 17:14:31 UTC 2025","1375","Books and Authors API Automation Suite","Books API Tests","com.avenga.yablonskyi.tests.books.BooksPositiveTest","com.avenga.yablonskyi.tests.books.BooksPositiveTest","checkGetAllBooks","Verify that all books informations can be retrieved via API","Ensure that the GET /Books endpoint returns a non-empty list of books."
"passed","Tue Jul 29 17:14:33 UTC 2025","Tue Jul 29 17:14:34 UTC 2025","198","Books and Authors API Automation Suite","Authors API Tests","com.avenga.yablonskyi.tests.authors.AuthorsEdgeCasesTest","com.avenga.yablonskyi.tests.authors.AuthorsEdgeCasesTest","checkGetZeroIdAuthorReturns404","Verify that getting an author with zero ID returns 404","Ensure the API returns 404 when author ID = 0"
